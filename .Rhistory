library(dplyr)
library(survival)
library(dplyr)
data(lung)
head(lung)
?lung
# Réponse :
?lung
#
#
#
#
#
#
#
#
require(survival)
data(bladder1)
head(bladder1)
?bladder1
bladder_v1 <- bladder1[!duplicated(bladder1$id,fromLast=F),c("id","treatment","stop","status","number")] # on ne garde que la dernière observation de chaque patient
bladder_v1$recidive <- ifelse(bladder_v1$status==1,1,0) # création de la variable récidive
bladder_v1 <- subset(bladder_v1,treatment!="pyridoxine") # on enlève les patients qui ont eu le traitement pyridoxine
head(bladder_v1)
km <- survfit(Surv(stop,recidive)~treatment,data=bladder_v1) # estimation de la fonction de survie par la méthode KM
plot(km,lty=c(1,2)) # plot de la fonction de survie estimée
legend("topright", c("Placebo", "thiotepa"), lty = 1:2) # ajoute la légende
survdiff(Surv(stop,recidive)~treatment,data=bladder_v1) # permet de comparer les courbes de survie par le test du logrank
install.packages("packHV")
require(packHV) # package pour faire de belles courbes de survie
plot_km(Surv(stop,recidive)~treatment,data=bladder_v1,xlab="Temps (mois)",legend="topright",left=6)
summary(km)
bladder_v1$treatment<-factor(bladder_v1$treatment) # permet d'enlever le niveau "piridoxine
summary(coxph(Surv(stop,recidive)~treatment+number,data=bladder_v1)) # modèle de Cox
cox.zph(coxph(Surv(stop,recidive)~treatment+number,data=bladder_v1))
bladder_v1<-subset(bladder_v1,stop>0)
bladder_v1_dep=survSplit(bladder_v1,cut=c(12),end="stop",start="start",event="recidive")
bladder_v1_dep$treatment_new=I(bladder_v1_dep$treatment=="thiotepa")*as.numeric(bladder_v1_dep$stop>12)
summary(coxph(Surv(start,stop,recidive)~treatment+number+treatment_new,data=bladder_v1_dep))
resMart <- residuals(coxph(Surv(stop,recidive)~treatment+number,data=bladder_v1), type="martingale")
plot(bladder_v1$number, resMart, main="Martingale-residuals for number",
xlab="Number", ylab="Residus", pch=20)
lines(loess.smooth(bladder_v1$number, resMart), lwd=2, col="blue")
bladder_v2<-bladder1[!duplicated(bladder1$id,fromLast=F),c("id","treatment","stop","status","number")] # on ne garde que la dernière observation de chaque patient
bladder_v2$recidive<-ifelse(bladder_v2$status==1,1,ifelse(bladder_v2$status>1,2,0)) # création de la variable nécessaire pour les risques compétitifs
bladder_v2<-subset(bladder_v2,treatment!="pyridoxine") # on supprime les patients ayant eu du pyridoxine
bladder_v2$treatment<-factor(bladder_v2$treatment)
par(mfrow=c(1,3))
#KM
KM<-plot(survfit(Surv(stop,recidive)~treatment,data=bladder_v1),
col=c("blue","red"),xlab="Temps",ylab="Survie",
main="Kaplan-Meier",bty="l")
legend("topright",c("Placebo","Thiotepa"),col=c("blue","red"),
lty=c(1,1),bty="n")
#1-KM
KM1<-plot(cuminc(bladder_v1$stop,bladder_v1$recidive,bladder_v1$treatment),
col=c("blue","red"),lty=c(1,1),xlab="Temps",
ylab="Incidence cumulée",main="1-KM")
cov1 <- model.matrix(~ factor(treatment) + number,data = bladder_v2)[, -1] # met en forme les covariables pour le modèle
summary(crr(bladder_v2$stop,bladder_v2$recidive,cov1=cov1))
cov1 <- model.matrix(~ factor(treatment) + number,data = bladder_v2)[, -1] # met en forme les covariables pour le modèle
summary(crr(bladder_v2$stop,bladder_v2$recidive,cov1=cov1))
install.packages("cmprsk") # package pour l'analyse des risques compétitifs
require(cmprsk)
bladder_v2<-bladder1[!duplicated(bladder1$id,fromLast=F),c("id","treatment","stop","status","number")] # on ne garde que la dernière observation de chaque patient
bladder_v2$recidive<-ifelse(bladder_v2$status==1,1,ifelse(bladder_v2$status>1,2,0)) # création de la variable nécessaire pour les risques compétitifs
bladder_v2<-subset(bladder_v2,treatment!="pyridoxine") # on supprime les patients ayant eu du pyridoxine
bladder_v2$treatment<-factor(bladder_v2$treatment)
par(mfrow=c(1,3))
#KM
KM<-plot(survfit(Surv(stop,recidive)~treatment,data=bladder_v1),
col=c("blue","red"),xlab="Temps",ylab="Survie",
main="Kaplan-Meier",bty="l")
legend("topright",c("Placebo","Thiotepa"),col=c("blue","red"),
lty=c(1,1),bty="n")
#1-KM
KM1<-plot(cuminc(bladder_v1$stop,bladder_v1$recidive,bladder_v1$treatment),
col=c("blue","red"),lty=c(1,1),xlab="Temps",
ylab="Incidence cumulée",main="1-KM")
#Kalbfleisch et Prentice
KM2<-plot(cuminc(bladder_v2$stop,bladder_v2$recidive,bladder_v2$treatment),
col=c("blue","red","blue","red"),lty=c(1,1,2,2),
xlab="Temps",ylab="Incidence cumulée",
main="Kalbfleish et Prentice")
#test de gray
cuminc(bladder_v2$stop,bladder_v2$recidive,bladder_v2$treatment)
cov1 <- model.matrix(~ factor(treatment) + number,data = bladder_v2)[, -1] # met en forme les covariables pour le modèle
summary(crr(bladder_v2$stop,bladder_v2$recidive,cov1=cov1))
par(mfrow=c(1,2))
mod2<-crr(bladder_v2$stop,bladder_v2$recidive,cov1=cov1)
for(j in 1:ncol(mod2$res))
scatter.smooth(mod2$uft, mod2$res[,j],
main = names(mod2$coef)[j],
xlab ="Temps",
ylab ="Résidus de Schoenfeld")
install.packages('remotes')
library(remotes)
install.packages("crskdiag") # package necessaire pour le test de Lin
require(crskdiag)
diag_crr(Crsk(stop,recidive)~treatment+number,data=bladder_v2,test="prop",seed=1234)#permet de faire le test de Lin
install.packages('remotes')
library(remotes)
install.packages("crskdiag") # package necessaire pour le test de Lin
require(crskdiag)
diag_crr(Crsk(stop,recidive)~treatment+number,data=bladder_v2,test="prop",seed=1234)#permet de faire le test de Lin
install.packages("remotes")
install.packages('remotes')
library(remotes)
install.packages("crskdiag") # package necessaire pour le test de Lin
require(crskdiag)
diag_crr(Crsk(stop,recidive)~treatment+number,data=bladder_v2,test="prop",seed=1234)#permet de faire le test de Lin
install.packages('remotes')
library(remotes)
install.packages("crskdiag") # package necessaire pour le test de Lin
require(crskdiag)
diag_crr(Crsk(stop,recidive)~treatment+number,data=bladder_v2,test="prop",seed=1234)#permet de faire le test de Lin
cov2 <- model.matrix(~ factor(treatment) +factor(treatment) +number+ number,data = bladder_v2)[,-1]#met en forme les covariables dépendantes du temps pour le modèle
summary(crr(bladder_v2$stop,bladder_v2$recidive,cov1=cov1,
cov2=cov2[,c(2,2)],tf=function(t)return(cbind(t,t^2))))#modèle define and Gray avec variable dépendante du temps
install.packages('remotes')
library(remotes)
install.packages("crskdiag") # package necessaire pour le test de Lin
require(crskdiag)
diag_crr(Crsk(stop,recidive)~treatment+number,data=bladder_v2,test="prop",seed=1234)#permet de faire le test de Lin
install.packages("remotes")
install.packages("crskdiag") # package necessaire pour le test de Lin
install.packages("crskdiag") # package necessaire pour le test de Lin
cov2 <- model.matrix(~ factor(treatment) +factor(treatment) +number+ number,data = bladder_v2)[,-1]#met en forme les covariables dépendantes du temps pour le modèle
summary(crr(bladder_v2$stop,bladder_v2$recidive,cov1=cov1,
cov2=cov2[,c(2,2)],tf=function(t)return(cbind(t,t^2))))#modèle define and Gray avec variable dépendante du temps
# Réponse :
?lung
#
#
#
#
#
#
#
#
library(survival)
library(dplyr)
data(lung)
head(lung)
?lung
# estimation de la fonction de survie (proba de ne pas avoir fait l’event avant le temps t ) par la méthode KM
km <- survfit(Surv(stop,recidive)~treatment,data=bladder_v1)
# stop = temps de fin de chaque interval
# recidive = si il a fait une recivide
# Surv(stop,recidive) -> voir le help
km
# plot de la fonction de survie estimée
plot(km,lty=c(1,2))
# ajoute la légende
legend("topright", c("Placebo", "thiotepa"), lty = 1:2)
# permet de comparer les courbes de survie par le test du logrank
#H0 Egalité des fonctions de survie vs.
#H1 Au moins une des fonctions de survie est différente des autres
#comparer le nb d'event obs dans chaque groupe (traitement ici) à ce qui est attendu sous H0
survdiff(Surv(stop,recidive)~treatment,data=bladder_v1)
bladder_v1$treatment<-factor(bladder_v1$treatment) # permet d'enlever le niveau "piridoxine
summary(coxph(Surv(stop,recidive)~treatment+number,data=bladder_v1)) # modèle de Cox
setwd("~/Desktop/M2SPB/SURVIE/PROJET/M2-SURVIVAL-AIDS-PROJECT")
knitr::opts_chunk$set(echo = TRUE)
X <- read.csv2("X.csv")
X <- read.csv("X.csv")
View(X)
y <- read.csv("y.csv")
View(y)
X %>%
rename(id = X)
library(survival)
library(tidyverse)
library(arsenal)
X <- read.csv("X.csv")
y <- read.csv("y.csv")
X %>%
rename(id = X)
X <- read.csv("X.csv")
y <- read.csv("y.csv")
X %>%
rename(id = X) -> X
y %>%
rename(id = X) -> y
sim_data <- simSurv(n = 1000, dist = "weibull", time = 2, censor = 0.2, x = X$ivdrug)
set.seed(123)
sim_data <- simSurv(n = 1000, dist = "weibull", time = 2, censor = 0.2, x = X$ivdrug)
set.seed(123)
sim_data <- sim.survdata(n = 1000, dist = "weibull", time = 2, censor = 0.2, x = X$ivdrug)
install.packages('simsurv')
library(simsurv)
set.seed(123)
sim_data <- sim.survdata(n = 1000, dist = "weibull", time = 2, censor = 0.2, x = X$ivdrug)
sim_data <- simsurv(n = 1000, dist = "weibull", time = 2, censor = 0.2, x = X$ivdrug)
sim_data <- simsurv(n = 1000, dist = "weibull", time = 2, censor = 0.2, x = X)
sim_data <- simSurv(n = 1000, dist = "weibull", time = 2, censor = 0.2, x = X)
test <- tmerge(y, X, id=id, endpt = event(time, status))
test <- tmerge(X, X, id=id, endpt = event(time, status))
test <- tmerge(X, y, id=id, endpt = event(time, status))
View(test)
test <- tmerge(X, y, id=id, endpt = event(time, ivdrug))
set.seed(1412)
test <- tmerge(X, y, id=id, endpt = event(time, ivdrug))
test <- tmerge(y, X, id=id, endpt = event(time, ivdrug))
test <- tmerge(y, X, id=id, status = event(time, ivdrug))
View(X)
View(y)
View(y)
knitr::opts_chunk$set(echo = TRUE)
set.seed(10) #On fixe une "graine" de simulation pour tous avoir la même simulation
x <- seq(from = 0, to = 20, by = 0.1)
y <- 500 + 0.4 * (x - 10) ^ 3 #Simulation d'un polynôme du 3eme degrès
noise <- rnorm(length(x), mean = 10, sd = 50)
noisy.y <- y + noise # Buitage des données du polynome du 3ème degrés
test <- simsurv(lambdas = 0.1, gammas = 1.5, betas = c(trt = -0.5),
x = covs, maxt = 5)
test <- simsurv(lambdas = 0.1, gammas = 1.5, betas = c(trt = -0.5),
x = X, maxt = 5)
test <- simsurv(lambdas = 0.1, gammas = 1.5, betas = c(trt = -0.5),
x = X$ivdrug, maxt = 5)
test <- simsurv(lambdas = 0.1, gammas = 1.5, betas = c(trt = -0.5),
x = X %>% select(id,ivdrug) %>% as.data.frame(), maxt = 5)
test <- simsurv(lambdas = 0.1, gammas = 1.5, betas = c(id),
x = X %>% select(id,ivdrug) %>% as.data.frame(), maxt = 5)
test <- simsurv(lambdas = 0.1, gammas = 1.5, betas = id,
x = X %>% select(id,ivdrug) %>% as.data.frame(), maxt = 5)
test <- simsurv(lambdas = 0.1, gammas = 1.5, betas = 'id',
x = X %>% select(id,ivdrug) %>% as.data.frame(), maxt = 5)
test <- simsurv(lambdas = 0.1, gammas = 1.5,
x = X %>% select(id,ivdrug) %>% as.data.frame(), maxt = 5)
View(test)
y <- read.csv("y.csv")
X %>%
rename(id = X) -> X
y %>%
rename(id = X) -> y
View(test)
test <- simsurv(lambdas = 0.1,
gammas = 1.5,
x = X %>% select(id,ivdrug) %>% as.data.frame(),
maxt = 5,
mixture = TRUE)
test <- simsurv(lambdas = 2,
gammas = 1.5,
x = X %>% select(id,ivdrug) %>% as.data.frame(),
maxt = 5,
mixture = TRUE)
test <- simsurv(lambdas = 2,
gammas = 1.5,
x = X  %>% as.data.frame(),
maxt = 5,
mixture = TRUE)
test <- simsurv(lambdas = c(0.1, 0.05),
gammas = c(1, 1.5),
mixture = TRUE,
pmix = 0.5,
x = X  %>% as.data.frame(),
maxt = 5)
View(test)
test <- simsurv(lambdas = c(0.1, 0.05),
gammas = c(1, 1.5),
mixture = TRUE,
x = X  %>% as.data.frame())
View(test)
test <- simsurv(lambdas = 0.5,
betas = y,
gammas = c(1, 1.5),
x = X  %>% as.data.frame())
simdata <- sim.survdata(N=1000, T=100, num.data.frames=1)
simdata <- survdata(N=1000, T=100, num.data.frames=1)
simdata <- simsurv(N=1000, T=100, num.data.frames=1)
data(colon)
?colon
data(cancer, package="survival")
force(colon)
colon = data(colon, package="survival")
head(colon)
head(colon)
colon
colon -> colon
View(colon)
View(colon)
# on ne garde que la dernière observation de chaque patient
bladder_v1 <- bladder1[!duplicated(bladder1$id,fromLast=F),c("id","treatment","stop","status","number")]
View(bladder_v1)
```{r}
colon -> colon[!duplicated(bladder1$id,fromLast=T)]
colon -> colon %>%
group_by(id) %>%
mutate(n = row_number()) %>%
filter(n ==1)
colon %>%
group_by(id) %>%
mutate(n = row_number()) %>%
filter(n ==1) -> data
colon %>%
group_by(id) %>%
mutate(n = row_number()) %>%
filter(n ==1) -> data
View(data)
colon %>%
group_by(id) %>%
mutate(n = row_number(),
rx = rx %>% as.factor()) %>%
filter(n ==1) -> data
View(data)
install.packages('randomForestSRC')
data(follic) -> data
data(folic) -> data
folic -> data
library(randomForestSRC)
data(follic, package = "randomForestSRC") -> data
View(follic)
library(MASS)
Melanoma
Melanoma -> mela
View(mela)
View(mela)
mela %>%
filter(ulcer != 1)
mela %>% select(starts_with('s'))
